var _sc_nz$elm_hangman$Main$stoneRadius = 15;
var _sc_nz$elm_hangman$Main$stone = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$svg$Svg$circle,
		{
			ctor: '::',
			_0: _elm_lang$svg$Svg_Attributes$r(
				_elm_lang$core$Basics$toString(_sc_nz$elm_hangman$Main$stoneRadius)),
			_1: {
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$fill('black'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$cy(
						_elm_lang$core$Basics$toString(_sc_nz$elm_hangman$Main$stoneRadius + ((_p1._0 * _sc_nz$elm_hangman$Main$stoneRadius) * 2))),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$cx(
							_elm_lang$core$Basics$toString(_sc_nz$elm_hangman$Main$stoneRadius + ((_p1._1 * _sc_nz$elm_hangman$Main$stoneRadius) * 2))),
						_1: {ctor: '[]'}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _sc_nz$elm_hangman$Main$header = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$id('header'),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$h1,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('GO'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h2,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('(Easy on Me)'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}
	});
var _sc_nz$elm_hangman$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _sc_nz$elm_hangman$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _sc_nz$elm_hangman$Main$boardSize = 9;
var _sc_nz$elm_hangman$Main$intersectionToGrid = F2(
	function (index, _p3) {
		var y = (index / _sc_nz$elm_hangman$Main$boardSize) | 0;
		var x = A2(_elm_lang$core$Basics_ops['%'], index, _sc_nz$elm_hangman$Main$boardSize);
		return {ctor: '_Tuple2', _0: x, _1: y};
	});
var _sc_nz$elm_hangman$Main$boardView = function (board) {
	var svgWidth = (_sc_nz$elm_hangman$Main$stoneRadius * _sc_nz$elm_hangman$Main$boardSize) * 2;
	var positions = A2(_elm_lang$core$List$indexedMap, _sc_nz$elm_hangman$Main$intersectionToGrid, board);
	var stones = A2(_elm_lang$core$List$map, _sc_nz$elm_hangman$Main$stone, positions);
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$id('board'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$svg,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$width(
						_elm_lang$core$Basics$toString(svgWidth)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$height(
							_elm_lang$core$Basics$toString(svgWidth)),
						_1: {ctor: '[]'}
					}
				},
				stones),
			_1: {ctor: '[]'}
		});
};
var _sc_nz$elm_hangman$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('container'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _sc_nz$elm_hangman$Main$header,
			_1: {
				ctor: '::',
				_0: _sc_nz$elm_hangman$Main$boardView(model.board),
				_1: {ctor: '[]'}
			}
		});
};
var _sc_nz$elm_hangman$Main$Model = F3(
	function (a, b, c) {
		return {state: a, turn: b, board: c};
	});
var _sc_nz$elm_hangman$Main$Lost = {ctor: 'Lost'};
var _sc_nz$elm_hangman$Main$Won = {ctor: 'Won'};
var _sc_nz$elm_hangman$Main$Playing = {ctor: 'Playing'};
var _sc_nz$elm_hangman$Main$Black = {ctor: 'Black'};
var _sc_nz$elm_hangman$Main$White = {ctor: 'White'};
var _sc_nz$elm_hangman$Main$Nothing = {ctor: 'Nothing'};
var _sc_nz$elm_hangman$Main$init = {
	ctor: '_Tuple2',
	_0: A3(
		_sc_nz$elm_hangman$Main$Model,
		_sc_nz$elm_hangman$Main$Playing,
		_sc_nz$elm_hangman$Main$Black,
		A2(_elm_lang$core$List$repeat, _sc_nz$elm_hangman$Main$boardSize * _sc_nz$elm_hangman$Main$boardSize, _sc_nz$elm_hangman$Main$Nothing)),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _sc_nz$elm_hangman$Main$main = _elm_lang$html$Html$program(
	{init: _sc_nz$elm_hangman$Main$init, view: _sc_nz$elm_hangman$Main$view, update: _sc_nz$elm_hangman$Main$update, subscriptions: _sc_nz$elm_hangman$Main$subscriptions})();
var _sc_nz$elm_hangman$Main$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _sc_nz$elm_hangman$Main$PlaceStone = {ctor: 'PlaceStone'};
